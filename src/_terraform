#compdef terraform

# Determine the Terraform binary path
if command -v brew >/dev/null; then
    TF_BIN="$(brew --prefix)/bin/terraform"
else
    TF_BIN="$(command -v terraform)"
fi

if [[ ! -x $TF_BIN ]]; then
    return 1
fi

# Cache file for Terraform commands
CACHE_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/terraform/commands"
CACHE_DIR="$(dirname "$CACHE_FILE")"
mkdir -p "$CACHE_DIR"

# Helper function for logging debug output
_debug() {
    [[ -n $BASH_COMP_DEBUG_FILE ]] && echo "$*" >> "$BASH_COMP_DEBUG_FILE"
}

# Parse Terraform commands and cache them
parse_commands() {
    local help_text commands_section
    help_text="$($TF_BIN -help 2>/dev/null)"

    # Extract commands from both sections: "Main commands" and "All other commands"
    commands_section=$(echo "$help_text" | awk '/^Main commands:/,/^$|^Global options/' | tail -n +2)
    commands_section+=$(echo "$help_text" | awk '/^All other commands:/,/^$|^Global options/' | tail -n +2)

    # Parse commands and descriptions, filtering out invalid lines
    echo "$commands_section" | awk '/^  / {cmd = $1; $1 = ""; print cmd ":" substr($0, 2)}' | grep -E '^[a-zA-Z0-9_-]+:' > "$CACHE_FILE"
}

# Get Terraform commands from cache (or parse if outdated)
get_commands() {
    if [[ ! -f $CACHE_FILE || $(find "$CACHE_FILE" -mtime +1 2>/dev/null) ]]; then
        parse_commands
    fi
    cat "$CACHE_FILE"
}

# Parse subcommands for a specific Terraform command
get_subcommands() {
    local cmd="$1" help_text subcommands
    help_text="$($TF_BIN "$cmd" -help 2>/dev/null)"
    subcommands=$(echo "$help_text" | awk '/^Subcommands:$/,/^$/' | tail -n +2)

    echo "$subcommands" | awk '/^  / {subcmd = $1; $1 = ""; print subcmd ":" substr($0, 2)}' | grep -E '^[a-zA-Z0-9_-]+:'
}

# Parse flags for a specific Terraform command
get_flags() {
    local cmd="$1" help_text flags
    help_text="$($TF_BIN "$cmd" -help 2>/dev/null)"
    flags=$(echo "$help_text" | awk '/^[[:space:]]*-/ {flag = $1; $1 = ""; print flag ":" substr($0, 2)}')

    echo "$flags" | grep -E '^-[a-zA-Z0-9_-]+:'
}

# Main completion function
_terraform() {
    local state context cur commands subcommands flags ret=1
    curcontext="$curcontext" state="" ret=1

    commands=($(get_commands))

    _arguments -C \
        '1: :->commands' \
        '*:: :->args'

    case $state in
        commands)
            _describe -t commands 'Terraform commands' commands && ret=0
            ;;
        args)
            case $words[1] in
                state|workspace|providers)
                    subcommands=($(get_subcommands "$words[1]"))
                    _describe -t subcommands "${words[1]} subcommands" subcommands && ret=0
                    ;;
                *)
                    flags=($(get_flags "$words[1]"))
                    _describe -t flags "${words[1]} flags" flags && ret=0
                    _files && ret=0
                    ;;
            esac
            ;;
    esac

    return $ret
}

# Associate the _terraform function with the terraform command
compdef _terraform terraform

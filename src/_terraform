#compdef terraform

# ==============================================================================
# ZSH Completion for Terraform
# Purpose: Provide advanced completion for Terraform commands and options
# Author: Claude
# ==============================================================================

# ------------------------------------------------------------------------------
# Main Commands
# ------------------------------------------------------------------------------

# Main commands as defined in terraform help
_terraform_main_commands=(
    'init:Prepare your working directory for other commands'
    'validate:Check whether the configuration is valid'
    'plan:Show changes required by the current configuration'
    'apply:Create or update infrastructure'
    'destroy:Destroy previously-created infrastructure'
)

# Other commands as defined in terraform help
_terraform_other_commands=(
    'console:Try Terraform expressions at an interactive command prompt'
    'fmt:Reformat your configuration in the standard style'
    'force-unlock:Release a stuck lock on the current workspace'
    'get:Install or upgrade remote Terraform modules'
    'graph:Generate a Graphviz graph of the steps in an operation'
    'import:Associate existing infrastructure with a Terraform resource'
    'login:Obtain and save credentials for a remote host'
    'logout:Remove locally-stored credentials for a remote host'
    'metadata:Metadata related commands'
    'output:Show output values from your root module'
    'providers:Show the providers required for this configuration'
    'refresh:Update the state to match remote systems'
    'show:Show the current state or a saved plan'
    'state:Advanced state management'
    'taint:Mark a resource instance as not fully functional'
    'test:Execute integration tests for Terraform modules'
    'untaint:Remove the tainted state from a resource instance'
    'version:Show the current Terraform version'
    'workspace:Workspace management'
)

# Global flags as defined in terraform help
_terraform_global_flags=(
    '-chdir:Switch to a different working directory before executing the given subcommand'
    '-help:Show this help output, or the help for a specified subcommand'
    '-version:An alias for the version subcommand'
)

# ------------------------------------------------------------------------------
# Subcommand Definitions
# ------------------------------------------------------------------------------

# Workspace subcommands
_terraform_workspace_subcommands=(
    'new:Create a new workspace'
    'list:List workspaces'
    'show:Show the current workspace'
    'select:Select a workspace'
    'delete:Delete a workspace'
)

# State subcommands
_terraform_state_subcommands=(
    'list:List resources in the state'
    'show:Show a resource in the state'
    'mv:Move an item in the state'
    'rm:Remove instances from the state'
    'pull:Pull current state'
    'push:Update remote state from local'
    'replace-provider:Replace provider in the state'
)

# Provider subcommands
_terraform_providers_subcommands=(
    'mirror:Mirror providers for the current configuration'
    'schema:Show schemas for the providers'
)

# ------------------------------------------------------------------------------
# Completion Function
# ------------------------------------------------------------------------------

_terraform() {
    local context state state_descr line ret=1
    typeset -A opt_args

    _arguments -C \
        '1: :->command' \
        '*:: :->args' && ret=0

    case $state in
        command)
            _describe -t terraform-main-commands 'terraform main commands' _terraform_main_commands && ret=0
            _describe -t terraform-other-commands 'terraform other commands' _terraform_other_commands && ret=0
            _describe -t terraform-global-flags 'terraform global flags' _terraform_global_flags && ret=0
            ;;
        args)
            case $words[1] in
                workspace)
                    _describe -t terraform-workspace-subcommands 'terraform workspace subcommands' _terraform_workspace_subcommands && ret=0
                    ;;
                state)
                    _describe -t terraform-state-subcommands 'terraform state subcommands' _terraform_state_subcommands && ret=0
                    ;;
                providers)
                    _describe -t terraform-providers-subcommands 'terraform providers subcommands' _terraform_providers_subcommands && ret=0
                    ;;
                init|plan|apply|destroy|refresh)
                    _arguments \
                        '-var[Set a variable in the Terraform configuration]' \
                        '-var-file[Set variables from a file]:file:_files -g "*.tfvars"' \
                        '*:file:_files -g "*.tf"' && ret=0
                    ;;
            esac
            ;;
    esac

    return ret
}

compdef _terraform terraform
